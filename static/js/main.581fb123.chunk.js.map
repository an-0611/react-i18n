{"version":3,"sources":["App.js","serviceWorker.js","i18n/en.js","i18n/zh.js","i18n/ja.js","index.js"],"names":["App","props","state","setLocale","this","onClick","id","value","Date","year","month","day","weekday","style","unit","unitDisplay","zero","one","few","many","other","Component","Boolean","window","location","hostname","match","en","home","todos","news","zh","ja","ReactDOM","render","messages","useState","navigator","language","locale","includes","key","defaultLocale","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAsFeA,E,YAxEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,sEAQV,IAECC,EAAcC,KAAKH,MAAnBE,UACR,OACE,6BACI,6BACE,4BAAQE,QAAS,kBAAMF,EAAU,QAAjC,gBACA,4BAAQE,QAAS,kBAAMF,EAAU,aAAjC,gBACA,4BAAQE,QAAS,kBAAMF,EAAU,QAAjC,iBAEF,kBAAC,IAAD,CACEG,GAAG,SAYL,6BACA,kBAAC,IAAD,CACEC,MAAO,IAAIC,KACXC,KAAK,UACLC,MAAM,OACNC,IAAI,UACJC,QAAQ,SAGV,6BAEA,kBAAC,IAAD,CAAeL,MAAO,IAAIC,OAC1B,6BAEA,kBAAC,IAAD,CACED,MAAO,IACPM,MAAM,OACNC,KAAK,WACLC,YAAY,SAGd,6BACA,kBAAC,IAAD,CAAuBR,MAAO,IAAIC,KAAS,MAE3C,6BACA,kBAAC,IAAD,CACED,MAAO,EACPM,MAAM,UACNG,KAAK,OACLC,IAAI,UAEJC,IAAI,MACJC,KAAK,OACLC,MAAM,qB,GAjEAC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAOeC,EAPJ,CACTC,KAAM,OACNC,MAAO,QACPC,KAAM,QCIOC,EAPJ,CACTH,KAAM,eACNC,MAAO,2BACPC,KAAM,gBCIOE,EAPJ,CACTJ,KAAM,uCACNC,MAAO,yBACPC,KAAM,4BCsCRG,IAASC,OAAO,mBAxBH,WAAO,IAEdC,EAFa,EACWC,mBAASC,UAAUC,UAD9B,mBACVC,EADU,KACFpC,EADE,KAWjB,OANEgC,EADEI,EAAOC,SAAS,MACPT,EACFQ,EAAOC,SAAS,MACdR,EAEAL,EAGX,kBAAC,IAAD,CACEY,OAAQA,EACRE,IAAKF,EACLG,cAAc,KACdP,SAAUA,GAEV,iEAAeE,UAAUC,WACzB,yFAAmBC,IACnB,kBAAC,EAAD,CAAKpC,UAAWA,OAIN,MAAUwC,SAASC,eAAe,SJwF5C,kBAAmBP,WACrBA,UAAUQ,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.581fb123.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {\n  FormattedMessage, // 轉換不同語系字串\n  FormattedNumber, // 數值多語系\n  FormattedPlural, // 格式化的量詞 // https://smithjson.github.io/2018/12/15/i18n%E5%9C%A8react%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/\n  //　plural: 國際規範: http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html\n  FormattedDate,　// ex: 2019年11月20日 星期三\n  FormattedTime, // ex: 上午10:34\n  FormattedRelativeTime, // 顯示距今或一段的時間長度 回傳距今的時間\n  // <FormattedRelative></FormattedRelative>  version: 2.xx, version 3.xx is <FormattedRelativeTime>\n} from 'react-intl';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // name: 'Eric',\n      // unreadCount: 1000,\n    };\n  }\n\n  render() {\n    // const {name, unreadCount} = this.state;\n    const { setLocale } = this.props;\n    return (\n      <div>\n          <div>\n            <button onClick={() => setLocale('en')}>英文</button>\n            <button onClick={() => setLocale('zh-Hant')}>中文</button>\n            <button onClick={() => setLocale('ja')}>日文</button>\n          </div>\n          <FormattedMessage\n            id=\"home\" // 抓個語系的key(home)的value\n            // defaultMessage={`Hello {name}, you have {unreadCount, number} {unreadCount, plural,\n            //             one {message}\n            //             other {messages}\n            //           }`}\n            // values={\n            //   {\n            //     name: <b>{name}</b>,\n            //     unreadCount\n            //   }\n            // }\n          />\n          <br />\n          <FormattedDate\n            value={new Date()}\n            year=\"numeric\"\n            month=\"long\"\n            day=\"numeric\"\n            weekday=\"long\"\n          />\n          {/* <!-- 使用多語系的時間格式 --> */}\n          <br />\n\n          <FormattedTime value={new Date()} />\n          <br />\n\n          <FormattedNumber\n            value={1000000}\n            style=\"unit\"\n            unit=\"kilobyte\"\n            unitDisplay=\"long\"\n          />\n          {/* FormattedNumber 格式化量詞 https://smithjson.github.io/2018/12/15/i18n%E5%9C%A8react%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/ */}\n          <br />\n          <FormattedRelativeTime value={new Date() - 60 * 10}/>\n\n          <br />\n          <FormattedPlural\n            value={1} // 一個通常就不會量化 輸出就會是 one='message'\n            style='ordinal'\n            zero='zero' // 代表value=0 輸出'zero'\n            one='message'\n            // two=\"two\"\n            few=\"few\" // value不超過一個固定區間 輸出'few'\n            many=\"many\" // value超過一個固定區間 輸出'few'\n            other='messagessss' // 其他情況下\n          />\n          {/* FormattedPlural用法: https://www.jianshu.com/p/c57e000c2bbf  (中文語系較少用到 沒有英文量詞的量化 ex: apple => apples  ))) */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const en = {\n  home: \"Home\",\n  todos: \"Todos\",\n  news: \"News\",\n  // ...\n};\n\nexport default en;","const zh = {\n  home: \"首頁\",\n  todos: \"待辦事項\",\n  news: \"新聞\",\n  // ...\n};\n\nexport default zh;","const ja = {\n  home: \"ホームページ\",\n  todos: \"ToDoリスト\",\n  news: \"ニュース\",\n  // ...\n}\n\nexport default ja;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { IntlProvider } from 'react-intl';\n\n// addLocaleData([ react-intl 3.0 已經棄用\n// ])\nimport en from './i18n/en.js'\nimport zh from './i18n/zh.js'\nimport ja from './i18n/ja.js'\n\n// https://pjchender.blogspot.com/2019/07/react-intl-react-i18n.html\n// https://linyencheng.github.io/2017/09/21/react-intl/\n// https://ithelp.ithome.com.tw/articles/10207442\n\nconst Root = () => {\n  const [locale, setLocale] = useState(navigator.language);\n  let messages;\n  // 根據使用者選擇的語系 locale 切換使用不同的 messages\n  if (locale.includes('zh')) {\n    messages = zh;\n  } else if (locale.includes('ja')) {\n    messages = ja;\n  } else {\n    messages = en;\n  }\n  return (\n    <IntlProvider\n      locale={locale}\n      key={locale}\n      defaultLocale=\"en\"\n      messages={messages}\n    > \n      <div>{`初始語系: ${navigator.language}`}</div>\n      <div>{`當前網站使用語系: ${locale}`}</div>\n      <App setLocale={setLocale} />{/* key => 切換語系後重新渲染components */}\n    </IntlProvider>\n  );\n}\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}